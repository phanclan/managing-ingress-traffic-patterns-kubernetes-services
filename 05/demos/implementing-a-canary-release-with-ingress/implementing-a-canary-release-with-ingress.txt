This exercise assumes a working Kubernetes cluster running on a public cloud
platform (e.g. AWS, GCP, Azure). After the cluster has been created, before
proceeding, install the Traefik ingress controller with its dashboard enabled.
NOTE: Be sure to use version 1.x of Traefik and NOT 2.x, which does not support
the use of annotations.

The ingress controller can be installed with Helm using the official chart
(https://bit.ly/2JHfPM8), or using a set of manifests (https://bit.ly/2Fwz45V).
The cluster used in the demonstration in the course, was provisioned using kops
(https://kubernetes.io/docs/setup/custom-cloud/kops/).


Exercise: IMPLEMENTING A CANARY RELEASE WITH INGRESS
++++++++++++++++++++++++++++++++++++++++++++++++++++


1.  If you've enabled the Traefik dashboard, visit the URL you specified as
    part of the configuration to affirm its correct deployment.

2.  Acquaint yourself with the nature of the nginxhello deployment definition.

$ vim nginxhello.yaml

3.  Deploy the nginxhello application using the manifest in the file
    nginxhello.yaml (in the directory nginxhello).

$ kubectl apply -f nginxhello.yaml

4.  Acquaint yourself with the nature of the nginxhello service definition.

$ vim nginxhello-svc.yaml

5.  Deploy the nginxhello service that fronts the nginxhello workload

$ kubectl apply -f nginxhello-svc.yaml

6.  Acquaint yourself with the nature of the nginxhello ingress definition,
    and insert the name of the host that resolves to the load balancer that
    sits in front of the ingress controller.

$ vim nginxhello-ingress.yaml

7.  Deploy the nginxhello ingress that will route external traffic to the
    nginxhello service

$ kubectl apply -f nginxhello-ingress.yaml

8.  If you've enabled the Traefik dashboard, check that Traefik has updated
    its configuration with the fronted (rule) and backend (pod replicas)

9.  Test that the deployed version of the nginxhello application is version
    1.14.2

$ curl -s <hostname> | grep Version | sed 's/<[^>]*>//g'

10. Acquaint yourself with the nature of the canary version of the nginxhello
    deployment definition.

$ vim nginxhello-canary.yaml

11. Deploy the nginxhello canary release

$ kubectl apply -f nginxhello-canary.yaml

12. Return to the Traefik dashboard, and confirm that the canary replica has
    been added to the 'servers' in the Traefik backend

13. Test that the canary release of nginxhello serves 20% of client requests by
    issuing x10 requests, and ensuring two of those return version 1.15.8

$ for i in {1..10}; do \
      curl -s <hostname> | grep Version | sed 's/<[^>]*>//g'; done

14. Remove the canary deployment

$ kubectl delete deploy nginxhello-canary

15. Redefine the canary deployment by editing the file nginxhello-canary.yaml,
    and change the labels in the template and spec of the definition to be
    'nginxhello-canary' instead of 'nginxhello'

$ vim nginxhello-canary.yaml

16. Re-deploy the nginxhello canary release with the changes

$ kubectl apply -f nginxhello-canary.yaml

17. Acquaint yourself with the nature of the service that will front the 
    canary release

$ vim nginxhello-canary-svc.yaml

18. Apply the nginxhello canary service definition

$ kubectl apply -f nginxhello-canary-svc.yaml

19. Edit the ingress definition in nginxhello-ingress.yaml to add the
    annotation for the service weights under the metadata field,

    annotations:
      traefik.ingress.kubernetes.io/service-weights: |
        nginxhello: 95%
        nginxhello-canary: 5%
   
    along with the additional path in the ingress rule for the canary backend

    - backend
        serviceName: nginxhello-canary
        servicePort: 80

20. Apply the revised ingress definition

$ kubectl apply -f nginxhello-ingress.yaml

21. Return to the Traefik dashboard, and notice that the weights have been
    applied by Traefik such that the canary has a weight equivalent to 5%,
    whilst the total weight for the replicas associated with the original
    deployment equates to 95%

22. Test that only 5% of client traffic is routed to the canary release by the
    ingress controller (approx 50)

$ { for i in {1..1000}; do curl -s <hostname>; done } | \
      grep "1.15.8" | sed 's/<[^>]*>//g' | \
      wc -l








